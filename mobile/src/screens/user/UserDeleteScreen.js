import React, { useState } from "react";
import { View, Text, StyleSheet, SafeAreaView, Alert } from "react-native";
import {
  LoveButton,
  LoadingIndicator,
  LoveBackground,
  LoveInput,
} from "../../components";
import { deleteUser } from "firebase/auth";
import { getCurrentUser, logOut } from "@shared/services/firebase/auth";

const UserDeleteScreen = ({ navigation }) => {
  const [confirmationText, setConfirmationText] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  const currentUser = getCurrentUser();
  const requiredText = "X√ìA T√ÄI KHO·∫¢N C·ª¶A T√îI";

  const handleDeleteAccount = async () => {
    if (confirmationText.trim() !== requiredText) {
      setError("Vui l√≤ng nh·∫≠p ch√≠nh x√°c vƒÉn b·∫£n x√°c nh·∫≠n");
      return;
    }

    Alert.alert(
      "üíî X√°c nh·∫≠n cu·ªëi c√πng",
      "H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c. T√†i kho·∫£n v√† t·∫•t c·∫£ k·ª∑ ni·ªám t√¨nh y√™u c·ªßa b·∫°n s·∫Ω b·ªã x√≥a vƒ©nh vi·ªÖn.\n\nB·∫°n c√≥ th·ª±c s·ª± ch·∫Øc ch·∫Øn kh√¥ng?",
      [
        {
          text: "H·ªßy b·ªè",
          style: "cancel",
        },
        {
          text: "X√≥a vƒ©nh vi·ªÖn",
          style: "destructive",
          onPress: performAccountDeletion,
        },
      ]
    );
  };

  const performAccountDeletion = async () => {
    setLoading(true);
    setError("");

    try {
      if (!currentUser) {
        throw new Error("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng");
      }

      // Delete the user account from Firebase Auth
      await deleteUser(currentUser);

      // Note: In a production app, you would also want to:
      // 1. Delete user data from Firestore
      // 2. Delete any uploaded files/images
      // 3. Clean up any couple connections
      // 4. Notify the partner if applicable

      Alert.alert(
        "T√†i kho·∫£n ƒë√£ b·ªã x√≥a üíî",
        "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã x√≥a vƒ©nh vi·ªÖn. Ch√∫ng t√¥i r·∫•t ti·∫øc khi ph·∫£i chia tay b·∫°n.",
        [
          {
            text: "OK",
            onPress: () => {
              // Navigation will be handled by auth state listener
              // But we can also manually navigate to ensure it works
              navigation.reset({
                index: 0,
                routes: [{ name: "Login" }],
              });
            },
          },
        ]
      );
    } catch (err) {
      console.error("Error deleting account:", err);

      let errorMessage = "Kh√¥ng th·ªÉ x√≥a t√†i kho·∫£n. Vui l√≤ng th·ª≠ l·∫°i.";

      if (err.code === "auth/requires-recent-login") {
        errorMessage =
          "V√¨ l√Ω do b·∫£o m·∫≠t, vui l√≤ng ƒëƒÉng xu·∫•t v√† ƒëƒÉng nh·∫≠p l·∫°i tr∆∞·ªõc khi x√≥a t√†i kho·∫£n.";
      }

      Alert.alert("L·ªói", errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const handleCancel = () => {
    navigation.goBack();
  };

  if (loading) {
    return (
      <LoveBackground variant="secondary">
        <SafeAreaView style={styles.loadingContainer}>
          <LoadingIndicator
            message="ƒêang x·ª≠ l√Ω vi·ªác x√≥a t√†i kho·∫£n..."
            size="large"
          />
        </SafeAreaView>
      </LoveBackground>
    );
  }

  return (
    <LoveBackground variant="secondary">
      <SafeAreaView style={styles.container}>
        <View style={styles.content}>
          <View style={styles.header}>
            <Text style={styles.warningEmoji}>‚ö†Ô∏èüíî‚ö†Ô∏è</Text>
            <Text style={styles.title}>X√≥a t√†i kho·∫£n</Text>
            <Text style={styles.subtitle}>
              H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c
            </Text>
          </View>
          <View style={styles.warningContainer}>
            <Text style={styles.warningTitle}>‚ö†Ô∏è C·∫£nh b√°o</Text>
            <Text style={styles.warningText}>
              Vi·ªác x√≥a t√†i kho·∫£n s·∫Ω lo·∫°i b·ªè vƒ©nh vi·ªÖn:
            </Text>
            <View style={styles.warningList}>
              <Text style={styles.warningItem}>
                ‚Ä¢ H·ªì s∆° v√† th√¥ng tin c√° nh√¢n c·ªßa b·∫°n
              </Text>
              <Text style={styles.warningItem}>
                ‚Ä¢ T·∫•t c·∫£ tin nh·∫Øn t√¨nh y√™u v√† k·ª∑ ni·ªám
              </Text>
              <Text style={styles.warningItem}>
                ‚Ä¢ K·∫øt n·ªëi v·ªõi ng∆∞·ªùi y√™u c·ªßa b·∫°n
              </Text>
              <Text style={styles.warningItem}>
                ‚Ä¢ T·∫•t c·∫£ d·ªØ li·ªáu v√† c√†i ƒë·∫∑t ·ª©ng d·ª•ng
              </Text>
            </View>
            <Text style={styles.warningFooter}>
              H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c v√† kh√¥ng th·ªÉ kh√¥i ph·ª•c.
            </Text>
          </View>
          <View style={styles.confirmationContainer}>
            <Text style={styles.confirmationLabel}>
              ƒê·ªÉ x√°c nh·∫≠n x√≥a, vui l√≤ng nh·∫≠p:
            </Text>
            <Text style={styles.confirmationRequired}>{requiredText}</Text>

            <LoveInput
              value={confirmationText}
              onChangeText={setConfirmationText}
              placeholder="Nh·∫≠p vƒÉn b·∫£n x√°c nh·∫≠n ·ªü tr√™n"
              autoCapitalize="characters"
              autoCorrect={false}
              icon="warning-outline"
              error={error}
              style={styles.confirmationInput}
            />
          </View>
          <View style={styles.actionsContainer}>
            <LoveButton
              title="X√≥a t√†i kho·∫£n c·ªßa t√¥i vƒ©nh vi·ªÖn üíî"
              onPress={handleDeleteAccount}
              variant="primary"
              size="large"
              icon="trash-outline"
              disabled={confirmationText.trim() !== requiredText}
              style={[
                styles.deleteButton,
                confirmationText.trim() !== requiredText &&
                  styles.disabledButton,
              ]}
            />

            <LoveButton
              title="H·ªßy b·ªè - Gi·ªØ t√†i kho·∫£n üíï"
              onPress={handleCancel}
              variant="secondary"
              size="medium"
              icon="heart-outline"
              style={styles.cancelButton}
            />
          </View>
          <View style={styles.footer}>
            <Text style={styles.footerText}>
              C·∫ßn h·ªó tr·ª£? H√£y li√™n h·ªá v·ªõi b·ªô ph·∫≠n h·ªó tr·ª£ tr∆∞·ªõc khi x√≥a t√†i
              kho·∫£n.
            </Text>
          </View>
        </View>
      </SafeAreaView>
    </LoveBackground>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  content: {
    flex: 1,
    paddingHorizontal: 24,
    paddingVertical: 32,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  header: {
    alignItems: "center",
    marginBottom: 32,
  },
  warningEmoji: {
    fontSize: 48,
    marginBottom: 16,
  },
  title: {
    fontSize: 28,
    fontWeight: "bold",
    color: "#C2185B",
    textAlign: "center",
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    color: "#6D4C41",
    textAlign: "center",
    fontStyle: "italic",
  },
  warningContainer: {
    backgroundColor: "#FFF",
    borderRadius: 16,
    padding: 20,
    marginBottom: 32,
    borderWidth: 2,
    borderColor: "#FF6B6B",
    shadowColor: "#FF6B6B",
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.2,
    shadowRadius: 8,
    elevation: 6,
  },
  warningTitle: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#FF6B6B",
    marginBottom: 12,
  },
  warningText: {
    fontSize: 16,
    color: "#333",
    marginBottom: 12,
    fontWeight: "500",
  },
  warningList: {
    marginBottom: 16,
  },
  warningItem: {
    fontSize: 14,
    color: "#666",
    marginBottom: 6,
    lineHeight: 20,
  },
  warningFooter: {
    fontSize: 14,
    color: "#FF6B6B",
    fontWeight: "bold",
    fontStyle: "italic",
  },
  confirmationContainer: {
    marginBottom: 32,
  },
  confirmationLabel: {
    fontSize: 16,
    color: "#333",
    marginBottom: 8,
    fontWeight: "500",
  },
  confirmationRequired: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#FF6B6B",
    textAlign: "center",
    backgroundColor: "#FFF0F0",
    padding: 12,
    borderRadius: 8,
    marginBottom: 16,
    borderWidth: 1,
    borderColor: "#FFB6B6",
  },
  confirmationInput: {
    marginBottom: 0,
  },
  actionsContainer: {
    marginBottom: 32,
  },
  deleteButton: {
    backgroundColor: "#FF6B6B",
    marginBottom: 16,
  },
  disabledButton: {
    opacity: 0.5,
  },
  cancelButton: {
    borderColor: "#E91E63",
  },
  footer: {
    alignItems: "center",
  },
  footerText: {
    fontSize: 14,
    color: "#8D6E63",
    textAlign: "center",
    fontStyle: "italic",
    lineHeight: 20,
  },
});

export default UserDeleteScreen;
